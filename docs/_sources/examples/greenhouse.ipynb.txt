{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Greenhouse - Gaussian Process Supported MPC\n",
    "\n",
    "In this example MPC is used to control temperature and humidity of a green house. We will se how\n",
    "\n",
    "1. To linearize a nonlinear model using Neo\n",
    "2. Train a Neo Gaussian Process Regressor (GP)\n",
    "3. Use the GP to build a gray-box model\n",
    "4. How to pass time-varying parameter values to the MPC\n",
    "\n",
    "This example is inspired by the Master's Thesis of Benjamin Karg \"Model predictive climate control based on Gaussian processes\" at the Institute for Automation Engineering Laboratory for Systems Theory and Automatic Control, Otto-von-Guericke University 2017.\n",
    "\n",
    "## Introduction\n",
    "\n",
    "\n",
    "<img src=\"../images/greenhouse.png\" alt=\"drawing\" width=\"800\"/>\n",
    "\n",
    "The idea is showing how Gaussian Processes can be used to augment a linear model to capture nonlinear process behavior. For this reason we will linearize first a nonlinear model of a greenhouse and then train the gaussian process on the difference between linear and nonlinear model. Let $\\dot{x} = f(x,u,p)$ be the nonlinear model $p$ is a vector of parameters. We will linearize the model to obtain\n",
    "\n",
    "$$\n",
    "f(x,u,p) = A(d)(x - x_0) + B(d)(u - u_0) + f(x_0,u_0) + w(x,u,p)\n",
    "$$\n",
    "\n",
    "where $w(x,u,p)$ is the function of the residual, and it is nonlinear and unknown. We lean some GPs that approximate $w(x,u,p)$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model\n",
    "The model considers two states: the inside air temperature $T_{\\text{in}}$ and inside air humidity $H_{\\text{in}}$.\n",
    "Furthermore, there are five external parameters that act as disturbances: the outside air temperature $T_{\\text{ex}}$, relative outside air humidity $H_{\\text{ex}}$, wind speed $D_{\\text{ws}}$, global radiation $D_{\\text{rs}}$ and the soil surface temperature $T_{\\text{ss}}$.\n",
    "The manipulated variables are the vents opening position $U_{\\text{ven}}$, the shade screen position $U_{\\text{shd}}$, the heat from the air heating system $U_{\\text{heat}}$ and the water from the moisturisation system $U_{\\text{hum}}$.\n",
    "\n",
    "#### Temperature model\n",
    "Let us start with the ODE of the internal temperature:\n",
    "$$\n",
    "\\begin{align}\n",
    "\\label{eq:temp}\n",
    "\\begin{split}\n",
    "\\frac{dT_{\\text{in}}}{dt} &= \\frac{c_{\\text{area,ss}}  c_{\\text{sph,a}} c_{\\text{den,a}}}{c_{\\text{vol}}}  \\left(Q_{\\text{sol,a}} + Q_{\\text{cnv,ss-a}} + Q_{\\text{heat-a}} \\right.\\\\\n",
    "\t\t& \\left. + Q_{\\text{cnv-cnd,a-e}} - Q_{\\text{ven,a-e}} - Q_{\\text{loss,a-e}} - Q_{\\text{trp,cr}}\\right),\n",
    "\\end{split}\n",
    "\\end{align}\n",
    "$$\n",
    "where \n",
    "\n",
    "- $c_{\\text{area,ss}}$ is the soil surface, \n",
    "- $c_{\\text{sph,a}}$ is the specific heat\n",
    "- $c_{\\text{den,a}}$ is the density of the air. \n",
    "- $c_{\\text{vol}}$ is the volume of the greenhouse. \n",
    "\n",
    "\n",
    "\n",
    "while the loss of water vapor is due to exchange of air with the outside through ventilation.\n",
    "\n",
    "$Q_{sol,a}$ is the heat flux given by the solar radiation \n",
    "\n",
    "$$\n",
    "Q_{\\text{sol,a}} = c_{\\text{asw,a}}  V_{\\text{tsw,g}}  D_{\\text{rs,e}} \\left( 1 - U_{\\text{shd}} \\right),\n",
    "$$\n",
    "\n",
    "where \n",
    "\n",
    "- $c_{asw,a}$  short-wave absorption coefficient of the greenhouse air. \n",
    "- $V_{tsw,g}$  short wave heat transmission coefficient.\n",
    "\n",
    "\n",
    "The heat transfer between the soil temperature $T_{ss}$ and the inside temperature\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "Q_{cnv,ss--a} = c_{cnv,ss--a} \\left( T_{ss} - T_{in} \\right)\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "where $c_{cnv,ss--a}$ is the convection coefficient.\n",
    "\n",
    "The heat  transfer by conduction and convection between outside and inside is proportional to the outside temperature $T_{ex}$ and inside temperature $T_{in}$:\n",
    "$$\n",
    "\\begin{align}\n",
    "Q_{cnv-cnd,a-e} = c_{cnv-cnd,a-e} \\left( T_{ex} - T_{in})\\right)\n",
    "\\end{align}\n",
    "$$\n",
    "where $c_{cnv-cnd,a-e}$ is a conduction and convection coefficient. Finally, the heat transfer to the outside\n",
    "is given by:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "Q_{ven,a-e} + Q_{loss,a-e} = \\frac{c_{\\text{den,a}} c_{\\text{sph,a}}}{c_{area,ss}} V_{\\text{ven,flux}} \\left(T_{\\text{in}} - T_{\\text{ex}} \\right)\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "where $V_{\\text{ven,flux}}$ is the flux of air through the ventilation system and given by:\n",
    "\n",
    "$$\n",
    "V_{\\text{ven,flux}} = \\alpha D_{\\text{ws}}  U_{\\text{ven}}^{\\beta} + c_{\\text{loss}} D_{\\text{ws}} + c_{\\text{leak}}\n",
    "$$\n",
    "\n",
    "#### Humidity model\n",
    "Now let's see the ODE for the internal humidity:\n",
    "$$\n",
    "\\begin{align}\n",
    "\\frac{dH_{\\text{in}}}{dt} = \\frac{c_{\\text{area,ss}}}{c_{\\text{den,a}} c_{\\text{vol}}}  \\left(M_{\\text{trp,cr}}-M_{\\text{ven,a-e}}+U_{\\text{hum}}\\right),\n",
    "\\end{align}\n",
    "$$\n",
    "The two sources of water vapor are \n",
    "\n",
    "- $M_{\\text{trp,cr}}$ the crop transpiration \n",
    "- $U_{\\text{hum}}$ the injections of the moisturisation system\n",
    "\n",
    "the crop transpiration is given by the Penman-Monteith equation:\n",
    "$$\n",
    "\\begin{align}\n",
    "M_{\\text{trp,cr}} &= \\frac{1}{V_{\\text{r,trp}}} \\left( V_{\\text{hsat,a}} + \\frac{V_\\text{ssup}V_\\text{r,bl}V_\\text{rn,cr}}{c_{\\text{den,a}} c_{\\text{psy}} 2 D_{\\text{LAI}} V_{\\text{lt,vap}} } - H_{in} \\right)\n",
    "\\end{align}\n",
    "$$\n",
    "where $D_{\\text{LAI}}$ is the leaf area index of the crop, $c_{\\text{den,a}}$ is the density of the air inside the greenhouse and $c_{\\text{psy}}$ is the theromotynamic phychometric constant which is calculated as \n",
    "$$\n",
    "\\begin{align}\n",
    "c_{\\text{psy}} = \\frac{c_{p} p}{\\lambda M_W}\n",
    "\\end{align}\n",
    "$$\n",
    "where $p$ is the atmospheric pressure, $\\lambda$  is the vaporization latent heat of the water, $c_\\text{p}$ is the specific heat of air at constant pressure and $M_W$ is the ration of molecular weight of water vapor and dry air.\n",
    "\n",
    "Teten's formula is used for the water concentration of the air at saturation $V_{hsat,a}$:\n",
    "$$\n",
    "\\begin{equation}\\label{eq:vhsat}\n",
    "V_{\\text{hsat,a}} = 611.2  exp\\left({\\frac{\\frac{17.62  T_{\\text{in}}}{243.12 + D_{\\text{T,e}}}}{R_D \\left(273.2 + T_{\\text{in}}\\right)}}\\right),\n",
    "\\end{equation} \n",
    "$$\n",
    "where $R_D$ is the gas constant of water vapor. The transpiration resistance $V_{r,trp}$ is given by:\n",
    "\n",
    "$$\n",
    "V_{\\text{r,trp}} = \\frac{1}{2D_{LAI}}\\left[\\left(1+\\frac{V_{\\text{ssvp}}}{c_{\\text{psy}}}\\right)V_{\\text{r,bl}}+V_{\\text{r,s}}\\right],\n",
    "$$\n",
    "\n",
    "where $V_{\\text{r,bl}}$ is the boundary layer resistance and $V_{\\text{r,s}}$ is the stomatal resistance.\n",
    "$$\n",
    "\\begin{equation}\\label{eq:vrbl}\n",
    "V_{\\text{r,bl}} = 220  \\frac{c_{\\text{cl,cr}}^{0.2}}{V_{\\text{ws,a}}^{0.8}}\n",
    "\\end{equation}\n",
    "$$\n",
    "where $c_{\\text{cl,cr}}$ is the characteristic length of the crop leaf and and $V_{\\text{ws,a}}$ is the average inside air speed:\n",
    "$$\n",
    "\\begin{equation}\\label{eq:airspeed}\n",
    "V_{\\text{ws,a}} = \\frac{V_{\\text{ven,flux}}}{c_{\\text{area,p}}},\n",
    "\\end{equation}\n",
    "$$\n",
    "where $c_{\\text{area,p}}$ is the the cross section area the air is streaming through. \n",
    "\n",
    "The slope of the saturated vapor pressure curve $V_{\\text{ssvp}}$ is calculated by this empirical balance:\n",
    "\n",
    "$$\n",
    "V_{\\text{ssvp}} = 0.04145  e^{0.060888 T_{\\text{in}}}.\n",
    "$$\n",
    "\n",
    "Because the stomatal resistance of the tomato crop is mainly affected by global radiation, it can be described by:\n",
    "\n",
    "$$\n",
    "V_{\\text{r,s}}=200\\left(1+\\frac{1}{e^{0.05  V_{\\text{tsw,g}} D_{\\text{rs,e}} - 50}}\\right),\n",
    "$$\n",
    "\n",
    "where $V_{\\text{tsw,g}}$ is the short wave heat transmission coefficient depending on the cover, its whitening state and the shading screen.\n",
    "\n",
    "$V_{lt,vap}$ is the latent heat of evaporation of water calculated at internal air temperature using:\n",
    "\n",
    "$$\n",
    "V_{\\text{lt,vap}} = 4185.5  \\left(597.0 - 0.56 T_{\\text{in}}\\right).\n",
    "$$\n",
    "\n",
    "The loss of water vapour due to natural ventilation and infiltration $M_{\\text{ven,a-e}}$ is described by:\n",
    "\n",
    "$$\n",
    "M_{\\text{ven,a-e}} = \\frac{c_{\\text{den,a}}}{c_{\\text{area,ss}}}  V_{\\text{ven,flux}}  \\left(H_{\\text{in}}-H_{\\text{ex}}\\right)+ M_{\\text{loss,a-e}},\n",
    "$$\n",
    "\n",
    "where $M_{\\text{loss,a-e}}$ are constant infiltration losses.\n",
    "\n",
    "\n",
    "### Objective\n",
    "The goal is regulating the temperature and humidity of the greenhouse. So we need to formulate the problem as the set point tracking:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "        &\\!\\max_{\\mathbf{u}(\\cdot)}&\\qquad& \\sum_{i=1}^{N}200(T_{in,i} - T_{ref})^2  +100(H_{in,i} - H_{ref})^2  + 200(T_{in,N+1} - T_{ref})^2  +100(H_{in,N+1} - H_{ref})^2 \\\\\n",
    "        &\\text{s.t.}&&\\dot{x}=f(x,u,d),\\quad x(0)=x_0\\\\\n",
    "        &&&x \\in [x_{lb}, x_{ub}], \\,\\ u \\in [u_{lb}, u_{ub}].\n",
    "\\end{align}\n",
    "$$\n",
    "where $T_{ref}=25\\,\\ ^{\\circ}C$ and $H_{ref} = 0.015 \\,\\ g/m^3 $.\n",
    "\n",
    "We will compare the results of the MPC using\n",
    "\n",
    "- Linear Model --  $\\dot{x} = A(d)x + B(d)u$\n",
    "- Nonlinear Model --  $\\dot{x} = f(x,u,d)$\n",
    "- Linear Model with GP -- $\\dot{x} = A(d)x + B(d)u + GP(x,u)$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Implementation\n",
    "### Model\n",
    "Import necessary packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add HILO-MPC to path. NOT NECESSARY if it was installed via pip.\n",
    "import sys\n",
    "sys.path.append('../../../')\n",
    "\n",
    "import copy\n",
    "from hilo_mpc import NMPC, Model, GPR\n",
    "import hilo_mpc.core.learning.kernels as kernels\n",
    "import casadi as ca\n",
    "import scipy.io as scio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initialize the Neo-model object.\n",
    "\n",
    "**NOTE**: we will create two placeholders `mean_T` and `mean_H`that then will be substituted with the GP. Note that these have only a function of placeholder and do not have any physical meaning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Model(plot_backend='bokeh')\n",
    "\n",
    "x = model.set_dynamical_states(['T_in', 'H_in'], short_description=['inner_temperature', 'inner_humidity'])\n",
    "\n",
    "T_in = x[0]\n",
    "H_in = x[1]\n",
    "\n",
    "u = model.set_inputs(['U_ven', 'U_shd', 'U_heat', 'U_hum'],\n",
    "                     short_description=['vent_position', 'shade_screen', 'heating', 'humidity'])\n",
    "U_ven = u[0]\n",
    "U_shd = u[1]\n",
    "U_heat = u[2]\n",
    "U_hum = u[3]\n",
    "\n",
    "# Set the parameters \"mean_T\" and \"mean_H\" are placeholders for the GP.\n",
    "p = model.set_parameters([\"T_ex\", \"H_ex\", \"D_ws\", \"D_rs\", \"T_ss\", \"mean_T\", \"mean_H\"])\n",
    "\n",
    "T_ex = p[0]\n",
    "H_ex = p[1]\n",
    "D_ws = p[2]\n",
    "D_rs = p[3]\n",
    "T_ss = p[4]\n",
    "mean_T = p[5]\n",
    "mean_H = p[6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Known parameters\n",
    "c_sph = 1004.5e3  # [J/kg/K]\n",
    "c_den = 1.2041  # [kg/m^3]\n",
    "c_vol = 2922.0  # [m^3]\n",
    "c_area = 877.0  # [m^2]\n",
    "c_areap = 166.8  # [m^2]\n",
    "c_asw = 0.456  # 0.456 # [-]\n",
    "V_tsw = 0.995  # 1.0\n",
    "c_ssa = 11.774  # [W/K/m^2]\n",
    "c_ae = 14.099  # [W/K/m^2]\n",
    "c_loss = 4.5\n",
    "alpha = 0.0097\n",
    "beta = 0.54\n",
    "\n",
    "R_G = 287.1  # [J/kg/K]\n",
    "R_D = 461.51  # [J/kg/K]\n",
    "M_loss = 0.01  # [kg^2/m^5/s]\n",
    "LAI = 3.25  # [-]\n",
    "p_air = 101325  # [Pa]\n",
    "mw_ratio = 0.622  # [-]\n",
    "lam_v = 2.26e6  # [J/kg]\n",
    "c_pair = 1.006e3  # [J/kg/K]\n",
    "c_clcr = 0.2  # [m]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Equations\n",
    "c_T = c_sph * c_den * c_vol / c_area\n",
    "c_H = c_den * c_vol / c_area\n",
    "V_ven = D_ws * alpha * U_ven ** beta + c_loss * D_ws + 0.01\n",
    "\n",
    "Q_sol = V_tsw * c_asw * D_rs * (1.0 - U_shd)\n",
    "Q_ssa = c_ssa * (T_ss - T_in)\n",
    "Q_ae = c_ae * (T_in - T_ex)\n",
    "Q_loss = c_den * c_sph / c_area * V_ven * (T_in - T_ex)\n",
    "\n",
    "c_psy = c_pair * p_air / mw_ratio / lam_v  # [Pa/C]\n",
    "Vrbl = 220.0 * c_clcr ** 0.2 / (V_ven / c_areap) ** 0.8\n",
    "Vrs = 200.0 * (1.0 + 1.0 / ca.exp(0.05 * V_tsw * D_rs - 50.0))\n",
    "H_ex_a = H_ex * 611.2 * ca.exp((17.62 * T_ex) / (243.12 + T_ex)) / (R_D * (273.2 + T_ex))\n",
    "V_ssvp = 0.04145 * ca.exp(0.060888 * T_in)\n",
    "Vhsat = 611.2 * ca.exp((17.62 * T_in) / (243.12 + T_in)) / R_D * (273.2 + T_in)\n",
    "Vrncr = 0.8 * D_rs * (1.0 - U_shd)\n",
    "Vltvap = 4185.5 * (597.0 - 0.56 * T_in)\n",
    "Vrtrp = ((1.0 + V_ssvp / c_psy) * Vrbl + Vrs) / 2.0 / LAI\n",
    "\n",
    "Mtrpcr = (Vhsat + V_ssvp / c_psy / c_den / 2.0 / LAI * Vrbl * Vrncr / Vltvap - H_in) / Vrtrp\n",
    "Mven = c_den / c_area * V_ven * (H_in - H_ex_a) + M_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Now we initialize the ode. To the ode we add the two place holders. To build the linear model augmented with GP we are going to substitute these placeholders with the GP models. For the other cases, we are going to simply set them to zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the differential equations\n",
    "dT_in_nl = (Q_sol + Q_ssa + Q_ae - Q_loss + U_heat) / c_T + mean_T\n",
    "dH_in_nl = (Mtrpcr - Mven + U_hum) / c_H + mean_H\n",
    "\n",
    "model.set_dynamical_equations([dT_in_nl, dH_in_nl])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initial condition for the states\n",
    "T_in_ic = 25.0\n",
    "H_in_ic = 0.015\n",
    "x0 = [T_in_ic, H_in_ic]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sampling time\n",
    "dt = 5 * 60  # s (5 minutes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Linearization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# point along which we need to linearize the system\n",
    "T_in_0 = 25.0\n",
    "H_in_0 = 0.015\n",
    "U_ven_0 = 1.0\n",
    "U_shd_0 = 0.0\n",
    "U_heat_0 = 0.0\n",
    "U_hum_0 = 0.0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Linearize the model\n",
    "lin_model = model.linearize(linearization_point={'T_in': T_in_0, 'H_in': H_in_0, 'U_ven': U_ven_0, 'U_shd': U_shd_0,\n",
    "                                                 'U_heat': U_heat_0, 'U_hum': U_hum_0})\n",
    "\n",
    "# Alternativelly you can pass the directly the list. \n",
    "# In this case make sure the order of the states is correct!\n",
    "# lin_model = model.linearize(linearization_point=[T_in_0,H_in_0,U_ven_0,U_shd_0,U_heat_0,U_hum_0])\n",
    "\n",
    "# We copy the model for later\n",
    "lin_model_gp = lin_model.copy()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We don't need the placeholders for the linear and nonlinear models anymore, so we set them to zero"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set mean_T and mean_H to 0 for the linear and nonlinear model\n",
    "lin_model.substitute(p={'mean_T': 0., 'mean_H': 0.})\n",
    "model.substitute(p={'mean_T': 0., 'mean_H': 0.})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.setup(dt=dt)\n",
    "model.set_initial_conditions(x0=x0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Time-varying parameters can be passed to the MPC in a very easy way. For more info on time-varying parameters please [have a look at the documentation](../modules/controllers.rst#time-varying-parameters). In this case the forecasted weather conditions can be passed, such that the MPC knows what to expect in the future.\n",
    "\n",
    "Load the weather forecast predictions and put them in a dictionary. This will be passed to the NMPC. For more info look at the documentation. [TODO:put the link]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# \"T_ex\", \"H_ex\", \"D_ws\", \"D_rs\", \"T_ss\"\n",
    "ext_parameters = scio.loadmat('../../../examples/data/green_house/data_30_days_5min.mat')['x']\n",
    "values_tvp = {}\n",
    "for k, name in enumerate([\"T_ex\", \"H_ex\", \"D_ws\", \"D_rs\", \"T_ss\"]):\n",
    "    values_tvp[name] = ext_parameters[k, :].tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define NMPC - Time-varying parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define lower, upper bound and initial condition/guesses\n",
    "T_in_lb = 20.0\n",
    "T_in_ub = 30.0\n",
    "H_in_lb = 0.0\n",
    "H_in_ub = 0.03\n",
    "x_lb = [T_in_lb, H_in_lb]\n",
    "x_ub = [T_in_ub, H_in_ub]\n",
    "\n",
    "U_ven_lb = 1.0\n",
    "U_ven_ub = 100.0\n",
    "U_shd_lb = 0.0\n",
    "U_shd_ub = 0.7\n",
    "U_heat_lb = 0.0\n",
    "U_heat_ub = 1e6\n",
    "U_hum_lb = 0.0\n",
    "U_hum_ub = 0.2\n",
    "u_lb = [U_ven_lb, U_shd_lb, U_heat_lb, U_hum_lb]\n",
    "u_ub = [U_ven_ub, U_shd_ub, U_heat_ub, U_hum_ub]\n",
    "u0 = [1.0, 0.0, 0.0, 0.0]\n",
    "p0 = [10, 0.8, 1, 240, 15]\n",
    "\n",
    "lin_model.setup(dt=dt)\n",
    "nmpc = NMPC(lin_model)\n",
    "nmpc.horizon = 100\n",
    "nmpc.quad_stage_cost.add_states(names=['T_in', 'H_in'], weights=[200, 100], ref=[25, 0.015])\n",
    "nmpc.quad_terminal_cost.add_states(names=['T_in', 'H_in'], weights=[200, 100], ref=[25, 0.015])\n",
    "nmpc.set_box_constraints(x_ub=x_ub, x_lb=x_lb, u_lb=u_lb, u_ub=u_ub)\n",
    "nmpc.set_initial_guess(x_guess=x0, u_guess=u0)\n",
    "nmpc.set_scaling(x_scaling=[10, 0.1], u_scaling=[10, 0.1, 100, 0.01])\n",
    "\n",
    "# The names of the time-varying parameters are passed here.\n",
    "nmpc.set_time_varying_parameters(names=[\"T_ex\", \"H_ex\", \"D_ws\", \"D_rs\", \"T_ss\"], values=values_tvp)\n",
    "\n",
    "nmpc.setup(options={'print_level':0,'objective_function':'discrete'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "******************************************************************************\n",
      "This program contains Ipopt, a library for large-scale nonlinear optimization.\n",
      " Ipopt is released as open source code under the Eclipse Public License (EPL).\n",
      "         For more information visit http://projects.coin-or.org/Ipopt\n",
      "******************************************************************************\n",
      "\n"
     ]
    }
   ],
   "source": [
    "n_steps = 300\n",
    "solution = model.solution\n",
    "xi = copy.deepcopy(x0)\n",
    "for i in range(n_steps):\n",
    "    p0 = ext_parameters[:, i]\n",
    "    u = nmpc.optimize(x0=xi)\n",
    "    # nmpc.plot_mpc_prediction()\n",
    "    model.simulate(u=u, p=p0)\n",
    "    xi = model.solution['xf']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### GP training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are going to traing two GPs, one for the $T_{in}$ and one for $H_{in}$. The first will use three features: $D_{rs},D_{ws}$ and $T_{ex}$, while the second will use $T_{in},U_{ven}, D_{ws}$ and $D_{rs}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the data\n",
    "data_gp_T = scio.loadmat('../../../examples/data/green_house/data_gp_shd_ws_rs_T.mat')['w']\n",
    "data_gp_H = scio.loadmat('../../../examples/data/green_house/data_gp_Tin_ven_ws_rs_H.mat')['w']\n",
    "\n",
    "# We don't take all the data since thei are too many for the GP, but only a subsection of them\n",
    "X_train_T = data_gp_T[:-1, 0:-1:3].T\n",
    "Y_train_T = data_gp_T[[-1], 0:-1:3].T\n",
    "\n",
    "X_train_H = data_gp_H[:-1, 0:-1:8].T\n",
    "Y_train_H = data_gp_H[[-1], 0:-1:8].T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**NOTE**: Contrary to the Neural Network module, the GP module of Neo-MPC is written completely in CasADi and does not use a machine learning library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'p0:length_scales'",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)",
      "\u001B[0;32m<ipython-input-16-7b078e68eb21>\u001B[0m in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m     10\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     11\u001B[0m gp_T_in.fit_model(X_train_T.T, Y_train_T.T, theta_start, theta_bounds, plugin_options={'print_time':0}, \n\u001B[0;32m---> 12\u001B[0;31m                   solver_options={'print_level':0})\n\u001B[0m\u001B[1;32m     13\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     14\u001B[0m \u001B[0mhyperparameters\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mgp_H_in\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mhyperparameters\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/Documents/software_development/HILO-MPC/hilo_mpc/core/learning/gp.py\u001B[0m in \u001B[0;36mfit_model\u001B[0;34m(self, X_train, y_train, hyperparameter_start_values, hyperparameter_bounds, plugin_options, solver_options)\u001B[0m\n\u001B[1;32m    382\u001B[0m             \u001B[0mnegative_log_marginal_likelihood\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_neg_lml\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    383\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 384\u001B[0;31m         \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0moptimize_hyperparameters\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mnegative_log_marginal_likelihood\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    385\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    386\u001B[0m     \u001B[0;32mdef\u001B[0m \u001B[0mget_prediction_function\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX_query\u001B[0m\u001B[0;34m:\u001B[0m \u001B[0mndarray\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;34m->\u001B[0m \u001B[0mca\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mFunction\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/Documents/software_development/HILO-MPC/hilo_mpc/core/learning/gp.py\u001B[0m in \u001B[0;36moptimize_hyperparameters\u001B[0;34m(self, negative_log_marginal_likelihood)\u001B[0m\n\u001B[1;32m    332\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    333\u001B[0m         \u001B[0moptimized_hyperparameters\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;34m{\u001B[0m\u001B[0mname\u001B[0m\u001B[0;34m:\u001B[0m \u001B[0;34m[\u001B[0m\u001B[0msolution\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mvalue\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mvariable\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m]\u001B[0m \u001B[0;32mfor\u001B[0m \u001B[0mname\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mvariable\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mopti_variables\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mitems\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m}\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 334\u001B[0;31m         \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mupdate_hyperparameters\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mhyperparameter_values\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0moptimized_hyperparameters\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    335\u001B[0m         \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_optimization_stats\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0msolution\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mstats\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    336\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/Documents/software_development/HILO-MPC/hilo_mpc/core/learning/gp.py\u001B[0m in \u001B[0;36mupdate_hyperparameters\u001B[0;34m(self, hyperparameter_bounds, hyperparameter_values)\u001B[0m\n\u001B[1;32m    169\u001B[0m             \u001B[0;32mif\u001B[0m \u001B[0mparameter\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mfixed\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    170\u001B[0m                 \u001B[0;32mcontinue\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 171\u001B[0;31m             \u001B[0mparameter\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mvalue\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mhyperparameter_values\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m'p'\u001B[0m \u001B[0;34m+\u001B[0m \u001B[0mstr\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mct\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;34m+\u001B[0m \u001B[0;34m':'\u001B[0m \u001B[0;34m+\u001B[0m \u001B[0mparameter\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mname\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    172\u001B[0m             \u001B[0mct\u001B[0m \u001B[0;34m+=\u001B[0m \u001B[0;36m1\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    173\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;31mKeyError\u001B[0m: 'p0:length_scales'"
     ]
    }
   ],
   "source": [
    "# Initialize the two GPs. It is important that the second input to the GPR is the name of the parameters\n",
    "# we want to substitute.\n",
    "\n",
    "gp_T_in = GPR(['U_shd', 'D_ws', 'D_rs'], ['mean_T'], kernel=kernels.SquaredExponential())\n",
    "gp_H_in = GPR(['T_in', 'U_ven', 'D_ws', 'D_rs'], ['mean_H'], kernel=kernels.SquaredExponential())\n",
    "\n",
    "hyperparameters = gp_T_in.hyperparameters\n",
    "theta_start = {'sigma_noise': [0.0001], 'length_scales': [1], 'sigma_signal': [0.5]}\n",
    "theta_bounds = {'sigma_noise': 'fixed', 'length_scales': [0.1, 3], 'sigma_signal': [0.01, 2]}\n",
    "\n",
    "gp_T_in.fit_model(X_train_T.T, Y_train_T.T, theta_start, theta_bounds, plugin_options={'print_time':0}, \n",
    "                  solver_options={'print_level':0})\n",
    "\n",
    "hyperparameters = gp_H_in.hyperparameters\n",
    "theta_start = {'sigma_noise': [0.0001], 'length_scales': [1], 'sigma_signal': [0.5]}\n",
    "theta_bounds = {'sigma_noise': 'fixed', 'length_scales': [0.1, 3], 'sigma_signal': [0.01, 2]}\n",
    "\n",
    "gp_H_in.fit_model(X_train_H.T, Y_train_H.T, theta_start, theta_bounds, plugin_options={'print_time':0}, \n",
    "                  solver_options={'print_level':0})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can create the gray-box model by substituting to `mean_T` and `mean_H` the predicted means from the GPs. Note that Neo looks at name of the GP output and tries to match it with one of the model variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "lin_model_gp.substitute_from(gp_T_in)\n",
    "lin_model_gp.substitute_from(gp_H_in)\n",
    "lin_model_gp.setup(dt=dt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Now we can setup a new NMPC with the hybrid linar model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nmpc = NMPC(lin_model_gp)\n",
    "\n",
    "nmpc.horizon = 100\n",
    "\n",
    "nmpc.quad_stage_cost.add_states(names=['T_in', 'H_in'], weights=[200, 100], ref=[25, 0.015])\n",
    "\n",
    "nmpc.quad_terminal_cost.add_states(names=['T_in', 'H_in'], weights=[200, 100], ref=[25, 0.015])\n",
    "\n",
    "nmpc.set_box_constraints(x_ub=x_ub, x_lb=x_lb, u_lb=u_lb, u_ub=u_ub)\n",
    "\n",
    "nmpc.set_initial_guess(x_guess=x0, u_guess=u0)\n",
    "\n",
    "nmpc.set_scaling(x_scaling=[10, 0.1], u_scaling=[10, 0.1, 100, 0.01])\n",
    "\n",
    "nmpc.set_time_varying_parameters(names=[\"T_ex\", \"H_ex\", \"D_ws\", \"D_rs\", \"T_ss\"], values=values_tvp)\n",
    "\n",
    "nmpc.setup(options={'print_level': 0,'objective_function':'discrete'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_steps = 300\n",
    "solution = copy.deepcopy(solution)\n",
    "model.reset_solution()\n",
    "model.setup(dt=dt)\n",
    "model.set_initial_conditions(x0=x0)\n",
    "solution_hybrid = model.solution\n",
    "xi = copy.deepcopy(x0)\n",
    "for i in range(n_steps):\n",
    "    p0 = ext_parameters[:, i]\n",
    "    u = nmpc.optimize(x0=xi)\n",
    "    # nmpc.plot_mpc_prediction()\n",
    "    model.simulate(u=u, p=p0)\n",
    "    xi = model.solution['xf']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As comparison, we also solve the NMPC using the full nonlinear model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nmpc = NMPC(model)\n",
    "nmpc.horizon = 300\n",
    "nmpc.quad_stage_cost.add_states(names=['T_in', 'H_in'], weights=[200, 100], ref=[25, 0.015])\n",
    "nmpc.quad_terminal_cost.add_states(names=['T_in', 'H_in'], weights=[200, 100], ref=[25, 0.015])\n",
    "nmpc.set_box_constraints(x_ub=x_ub, x_lb=x_lb, u_lb=u_lb, u_ub=u_ub)\n",
    "nmpc.set_initial_guess(x_guess=x0, u_guess=u0)\n",
    "nmpc.set_scaling(x_scaling=[10, 0.1], u_scaling=[10, 0.1, 100, 0.01])\n",
    "nmpc.set_time_varying_parameters(names=[\"T_ex\", \"H_ex\", \"D_ws\", \"D_rs\", \"T_ss\"], values=values_tvp)\n",
    "nmpc.setup(options={'print_level': 0, 'objective_function':'discrete'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_steps = 300\n",
    "solution_hybrid = copy.deepcopy(solution_hybrid)\n",
    "model.reset_solution()\n",
    "model.setup(dt=dt)\n",
    "model.set_initial_conditions(x0=x0)\n",
    "solution_nonlinear = model.solution\n",
    "xi = copy.deepcopy(x0)\n",
    "for i in range(n_steps):\n",
    "    p0 = ext_parameters[:, i]\n",
    "    u = nmpc.optimize(x0=xi)\n",
    "    # nmpc.plot_mpc_prediction()\n",
    "    model.simulate(u=u, p=p0)\n",
    "    xi = model.solution['xf']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# plotting\n",
    "from bokeh.io import show, output_notebook\n",
    "from bokeh.plotting import figure\n",
    "from bokeh.layouts import gridplot\n",
    "import numpy as np\n",
    "\n",
    "output_notebook()\n",
    "p_tot = []\n",
    "for state in model.x.names:\n",
    "    p = figure(background_fill_color=\"#fafafa\", width=800, height=800)\n",
    "    p.line(x=np.array(solution_hybrid['t'][1:]).squeeze(), y=np.array(solution_hybrid[state]).squeeze(),\n",
    "           legend_label=state + '_hybrid', line_width=2)\n",
    "    p.line(x=np.array(solution['t'][1:]).squeeze(), y=np.array(solution[state]).squeeze(),\n",
    "           legend_label=state, line_width=2, color='green')\n",
    "    p.line(x=np.array(solution_nonlinear['t'][1:]).squeeze(), y=np.array(solution_nonlinear[state]).squeeze(),\n",
    "       legend_label=state+ '_nl', line_width=2, color='orange')\n",
    "    for i in range(len(nmpc.quad_stage_cost._references_list)):\n",
    "        if state in nmpc.quad_stage_cost._references_list[i]['names']:\n",
    "            position = nmpc.quad_stage_cost._references_list[i]['names'].index(state)\n",
    "            value = nmpc.quad_stage_cost._references_list[i]['ref'][position]\n",
    "            p.line([np.array(solution_hybrid['t'][1]).squeeze(), np.array(solution_hybrid['t'][-1]).squeeze()],\n",
    "                   [value, value], legend_label=state + '_ref',\n",
    "                   line_dash='dashed', line_color=\"red\", line_width=2)\n",
    "\n",
    "    p.yaxis.axis_label = state\n",
    "    p.xaxis.axis_label = 'time'\n",
    "    p.yaxis.axis_label_text_font_size = \"18pt\"\n",
    "    p.yaxis.major_label_text_font_size = \"18pt\"\n",
    "    p.xaxis.major_label_text_font_size = \"18pt\"\n",
    "    p.xaxis.axis_label_text_font_size = \"18pt\"\n",
    "\n",
    "    p_tot.append(p)\n",
    "\n",
    "show(gridplot(p_tot, ncols=1))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}